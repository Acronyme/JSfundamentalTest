<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ES6 数组方法</title>
</head>
<body>
<ul id='test'>
	<li>1</li>
	<li>2</li>
	<li>3</li>
</ul>
<script>
'use strict'
function foo() {
  var args = [...arguments];
  console.log(args);
}
foo(1,2,3,4)//[1,2,3,4]


//转换arguments对象
function argTest(){
return Array.from(arguments)
}
console.log(argTest(1,2,3,4,5,6));//[1, 2, 3, 4, 5, 6]

//转换参数为数组
let argumentTest = (a,...args)=>Array.from(args);
console.log(argumentTest(0,1,2,3,4,5,6,7));//[1, 2, 3, 4, 5, 6, 7]

//转换类数组对象
const arrayLikeObj={
	'0':'a',
	'1':'b',
	'2':'c',
	length:3
}
//ES5
console.log([].slice.call(arrayLikeObj));//["a", "b", "c"]
//ES6
console.log(Array.from(arrayLikeObj));//["a", "b", "c"]

//转换字符串
console.log(Array.from('hello'));//["h", "e", "l", "l", "o"]

//转换Set结构
let nameSet=new Set(['a','b'])
console.log(Array.from(nameSet));//["a", "b"]

//接受第二个参数后，类似于map()方法
//Array.from(arrayLike, x => x * x);
// 等同于
//Array.from(arrayLike).map(x => x * x);

console.log(Array.from([1, 2, 3], (x) => x * x))//[1,4,9]

//取得nodeList的文本内容
console.log(Array.from(document.querySelectorAll('#test li'),node=>node.innerText));//["1","2","3"]

console.log(Array.from({ length: 2 }, () => 'jack'));// ['jack', 'jack']



//Array.of()

Array.of(3, 11, 8) // [3,11,8]
Array.of(3) // [3]
Array.of(3).length // 1

Array() // []
Array(3) // [, , ,]
Array(3, 11, 8) // [3, 11, 8]

Array.of() // []
Array.of(undefined) // [undefined]
Array.of(1) // [1]
Array.of(1, 2) // [1, 2]

//copyWithin
console.log(

	[1,2,3,4,5].copyWithin(0,2),//[3, 4, 5, 4, 5]

	[1,2,3,4,-5].find(n=>n<0),//-5

	[1,2,3,4,5].findIndex((value,index,arr)=>value>4),//4

	[NaN].indexOf(NaN),//-1

    [NaN].findIndex(y => Object.is(NaN, y)),// 0

    ['a','b','c'].fill(1),//[1,1,1]

    new Array(5).fill(2),//2,2,2,2,2

    [1,2,3,4,5].fill(0,1,3)//[1, 0, 0, 4, 5]

	);

 for(let index of ['a','b'].keys()){
    	console.log(index);
    }//0,1

//console.log(['a','b'].values());

for (let elem of ['a', 'b'].entries()) {
  console.log(elem);
}//[0:'a'],[1:'b']

console.log([1,2,3].includes(2));//true
console.log([1,NaN,3].includes(NaN));//true

let arr=[1,2,3];
let entries=arr.entries;
console.log(
   entries.next().value,//[0:'a']
   entries.next().value,//[1,'b']
   entries.next().value//[2,'c']
	)


//数组空位

//Array构造出的数组是空数组
console.log(Array(5))//[]; 长度为5

//数组空位没有任何值。
console.log(0 in [undefined,undefined])//true
console.log(0 in [,,])//false

// forEach方法
[,'a'].forEach((x,i) => console.log(i)); // 1

// filter方法
['a',,'b'].filter(x => true) // ['a','b']

// every方法
[,'a'].every(x => x==='a') // true

// some方法
[,'a'].some(x => x !== 'a') // false

// map方法
[,'a'].map(x => 1) // [,1]

// join方法
[,'a',undefined,null].join('#') // "#a##"

// toString方法
[,'a',undefined,null].toString() // ",a,,"


//Array.from(['a',,'b'])// [ "a", undefined, "b" ]
[...['a',,'b']]// [ "a", undefined, "b" ]

//copyWithin()会连空位一起拷贝。
[,'a','b',,].copyWithin(2,0) // [,"a",,"a"] 

//fill()会将空位视为正常的数组位置。
new Array(3).fill('a') // ["a","a","a"]

//for...of循环也会遍历空位。
let arr = [, ,];
for (let i of arr) {
  console.log(1);
}
// 1
// 1


// entries()
[...[,'a'].entries()] // [[0,undefined], [1,"a"]]

// keys()
[...[,'a'].keys()] // [0,1]

// values()
[...[,'a'].values()] // [undefined,"a"]

// find()
[,'a'].find(x => true) // undefined

// findIndex()
[,'a'].findIndex(x => true) // 0
</script>
</body>
</html>
